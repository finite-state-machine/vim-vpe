#!/usr/bin/env python
"""Script to run tests and generate coverage report."""

import argparse
import os
import platform
import shutil
import subprocess
import sys
import time
from pathlib import Path


def run(cmd, timeit=False, covit=False, silent=False):
    """Run an external program."""
    env = os.environ.copy()
    if timeit:
        a = time.time()
    if covit:
        if platform.platform().startswith('CYGWIN'):
            env['COVERAGE_FILE'] = '.coverage-win.run'
        else:
            env['COVERAGE_FILE'] = '.coverage.run'
    proc = subprocess.run(cmd.split(), env=env, check=False)
    if timeit:
        print(f'Run took {time.time() - a:.2f} seconds')

    if proc.returncode != 0 and not silent:
        sys.exit(f'Process exited with error code {proc.returncode}\n'
                 f'Executed args = {proc.args}')


def main(args, rem_args):
    """Run the tests and generate coverage data."""
    here = Path(__file__).parent
    if args.inc_win:
        os.environ['COVERAGE_RCFILE'] = f'{here}/.coveragerc-inc-win'
    else:
        os.environ['COVERAGE_RCFILE'] = f'{here}/.coveragerc'
    print(os.environ['COVERAGE_RCFILE'])

    if not args.report:
        run(
            f'coverage run ./all_tests.py {" ".join(rem_args)}', timeit=True,
            covit=True)
    if not platform.platform().startswith('CYGWIN'):
        if args.inc_win:
            shutil.copy('.coverage-win.vim', '.coverage.wvim')
            shutil.copy('.coverage-win.run', '.coverage.wrun')
        if not args.report:
            run('coverage combine .')
        run('coverage report')
        run('coverage html -d covhtml/')
        run('coverage json --pretty')
        run('coverage annotate -d ann')

        run('py-cov-combine', silent=True)


if __name__ == "__main__":
    parser = argparse.ArgumentParser('Run tests and produce coverage.')
    parser.add_argument(
        "--inc_win", action="store_true",
        help='Include windows in coverage.')
    parser.add_argument(
        "--report", action="store_true",
        help='Just run coverage reporing steps.')

    p_args, p_rem_args = parser.parse_known_args()
    main(p_args, p_rem_args)
